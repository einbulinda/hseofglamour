// Generated by CodiumAI

describe("middleware_function", () => {
  // Tests that an authenticated user can access a public path
  it("test_authenticated_user_accessing_public_path", async () => {
    // Arrange
    const req = {
      nextUrl: { pathname: "/auth/signin" },
      url: "http://localhost:3000/auth/signin",
    };

    // Act
    const res = await middleware(req);

    // Assert
    expect(res).toHaveProperty("status", 200);
  });

  // Tests that an unauthenticated user can access a public path
  it("test_unauthenticated_user_accessing_public_path", async () => {
    const req = {
      nextUrl: { pathname: "/auth/signin" },
      url: "http://localhost:3000/auth/signin",
    };
    const res = await middleware(req);
    expect(res).toEqual(expect.objectContaining({ status: 200 }));
  });

  // Tests that an authenticated user can access a private path
  it("test_authenticated_user_accessing_private_path", async () => {
    const req = {
      nextUrl: { pathname: "/private" },
      url: "http://localhost:3000/private",
    };
    const res = await middleware(req);
    expect(res).toEqual(expect.objectContaining({ status: 200 }));
  });

  // Tests that an unauthenticated user cannot access a private path
  it("test_unauthenticated_user_accessing_private_path", async () => {
    const req = {
      nextUrl: { pathname: "/private" },
      url: "http://localhost:3000/private",
    };
    const res = await middleware(req);
    expect(res).toEqual(expect.objectContaining({ status: 302 }));
    expect(res.headers.get("location")).toEqual("/auth/signin");
  });

  // Tests that an error is thrown when authenticating user
  it("test_error_occurs_while_authenticating_user", async () => {
    const req = {
      nextUrl: { pathname: "/private" },
      url: "http://localhost:3000/private",
    };
    console.error = jest.fn();
    await middleware(req);
    expect(console.error).toHaveBeenCalled();
  });

  // Tests that a user logged in but not authorized to access requested page is handled
  it("test_user_not_authorized_to_access_requested_page", async () => {
    const req = {
      nextUrl: { pathname: "/private" },
      url: "http://localhost:3000/private",
    };
    const res = await middleware(req);
    expect(res).toEqual(expect.objectContaining({ status: 302 }));
    expect(res.headers.get("location")).toEqual("/auth/signin");
  });
});
